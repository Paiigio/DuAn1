/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package view;

import DomainModels.CTSanPham;
import DomainModels.HoaDon;
import Service.CTSanPhamService;
import Service.HoaDonChiTietService;
import Service.HoaDonService;
import Service.IMEIService;
import Service.Interface.IHoaDonChiTietService;
import Service.Interface.IIMEIService;
import ViewModel.CTSanPhamModel;
import ViewModel.HoaDonChiTietModel;
import ViewModel.HoaDonModel;
import ViewModel.IMEIModel;
import com.github.sarxos.webcam.Webcam;
import com.github.sarxos.webcam.WebcamPanel;
import com.github.sarxos.webcam.WebcamResolution;
import com.google.zxing.BinaryBitmap;
import com.google.zxing.LuminanceSource;
import com.google.zxing.MultiFormatReader;
import com.google.zxing.NotFoundException;
import com.google.zxing.Result;
import com.google.zxing.client.j2se.BufferedImageLuminanceSource;
import com.google.zxing.common.HybridBinarizer;
import java.awt.Dimension;
import java.awt.image.BufferedImage;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.Executor;
import java.util.concurrent.Executors;
import java.util.concurrent.ThreadFactory;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import responsitory.CTSanPhamResponsitory;
import view.ThanhPhan.BanHangJpanel;

/**
 *
 * @author duong
 */
public class QuetQR extends javax.swing.JFrame implements Runnable, ThreadFactory{
        private WebcamPanel panel = null;
    private Webcam webcam = null;
        private static final long serialVersionUID = 6441489157408381878L;
    private Executor executor = Executors.newSingleThreadExecutor(this);
    public static CTSanPham ctsp;
      public String idctsp = "";
       HoaDonChiTietService hoaDonChiTieservice = new HoaDonChiTietService();
    CTSanPhamResponsitory ctspr = new CTSanPhamResponsitory();
        private IIMEIService iIMEIService = new IMEIService();
            private IHoaDonChiTietService iHoaDonChiTietService = new HoaDonChiTietService();

    JTable tblGioHang;
    JTable tblHoaDon;
    BanHangJpanel banHangjp;
    private final HoaDonService hoaDonService;
    private final CTSanPhamService chiTietSanPhamService;
    /**
     * Creates new form NewJFrame
     */
    public QuetQR(JTable tblGioHang, JTable tblHoaDon, BanHangJpanel banhangjp) {
        initComponents();
        initWebcam();
        setLocationRelativeTo(this);
            ctsp = new CTSanPham();
        this.tblGioHang = tblGioHang;
        this.tblHoaDon = tblHoaDon;
        this.banHangjp = banhangjp;
        chiTietSanPhamService = new CTSanPhamService();
        hoaDonService = new HoaDonService();
    }

    private QuetQR() {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        txt = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        jPanel1.add(txt, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 250, 290, 30));

        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 290, 250));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 290, 280));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
 webcam.close();
    }//GEN-LAST:event_formWindowClosed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(QuetQR.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new QuetQR().setVisible(true);
            }
        });
    }
  
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JTextField txt;
    // End of variables declaration//GEN-END:variables
    public void initWebcam(){
             Dimension size = WebcamResolution.QVGA.getSize();
        webcam = Webcam.getWebcams().get(0); //0 is default webcam
        webcam.setViewSize(size);

        panel = new WebcamPanel(webcam);
        panel.setPreferredSize(size);
        panel.setFPSDisplayed(true);

        jPanel2.add(panel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 300, 300));

        executor.execute(this);
    }
    @Override
    public void run() {
           do {
            try {
                Thread.sleep(100);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }

            Result result = null;
            BufferedImage image = null;

            if (webcam.isOpen()) {
                if ((image = webcam.getImage()) == null) {
                    continue;
                }
            }

            LuminanceSource source = new BufferedImageLuminanceSource(image);
            BinaryBitmap bitmap = new BinaryBitmap(new HybridBinarizer(source));

            try {
                result = new MultiFormatReader().decode(bitmap);
            } catch (NotFoundException e) {
                //No result...
            }

            if (result != null) {
                txt.setText(result.getText());
                ctsp=ctspr.quetQR(result.getText());
                if(ctsp!=null & ctsp.getMaQR()!=null){
                   JOptionPane.showConfirmDialog(this, "Đã tìm thấy sản phẩm "+ ctsp.getSp().getTen()+ ", size "+ctsp.getDl().getSoDungLuong()+", màu "+ctsp.getMs().getTen()+", cao "+"\n Bạn có muốn thêm sản phẩm này vào giỏ hàng không?");
                    idctsp = result.getText();
                    
                    
                     
        ArrayList<HoaDonChiTietModel> listHDCT = hoaDonChiTieservice.getAllHoaDonCT();
        int indexHD = tblHoaDon.getSelectedRow();
        if (indexHD < 0) {
            JOptionPane.showMessageDialog(this, "Moi ban chon don hang");
            return;
        }
        String maHD = tblHoaDon.getValueAt(indexHD, 0).toString();
        // Lấy ID Hóa Đơn
        HoaDon hd = new HoaDon();
        ArrayList<HoaDonModel> listHD = hoaDonService.getAllHoaDon();
        for (HoaDonModel h : listHD) {
            if (h.getMa() != null && h.getMa().equals(maHD)) {
                hd.setId(h.getId());
                
            }
        }
        System.out.println("ID Hóa đơn: " + hd.getId());
        // Check số lượng tồn
 
        // Lấy Id CTSP
    
        CTSanPham c = new CTSanPham();
        ArrayList<CTSanPhamModel> listCTSP = chiTietSanPhamService.getAllCTSanPham();
        for (CTSanPhamModel x : listCTSP) {
            if (x.getMa() != null && x.getMa().equals(ctsp.getMa())) {
                c.setId(x.getId());
            }
        }
        System.out.println("ID Chi tiết sản phẩm: " + c.getId());
        // list imei được chọn từ ctsp còn tồn
        ArrayList<IMEIModel> listIMEI = iIMEIService.selectSL(c.getId());
        IMEIModel imei = new IMEIModel();
        // nhập vào imei
        String maIMEI = (String) JOptionPane.showInputDialog(this, "Mời bạn chọn mã IMEI", "Lựa chọn", JOptionPane.INFORMATION_MESSAGE, null, null, "Mã IMEI");
        System.out.println("Mã vừa nhập :" + maIMEI);
        String ghiChu = "";
        String maIM = maIMEI;
        int dem = 0;
        // kiểm tra imei uvằ nhập vào
        for (IMEIModel i : listIMEI) {
            System.out.println("Mã imei trong list" + i.getMa());
            if (i.getMa() != null && i.getMa().equals(maIMEI)) {
                ghiChu = i.getGhiChu();
                List<String> listS = tachChuoi(i.getGhiChu());
                if (listS != null) {
                    for (String st : listS) {
                        if (maHD.equals(st)) {
                            JOptionPane.showMessageDialog(this, "IMEI đã tồn tại trong đơn hàng");
                            return;
                        } else {
                            dem++;
                            imei.setGhiChu(i.getGhiChu() + " " + maHD);
                        }
                    }
                } else {
                    dem++;
                    imei.setGhiChu(maHD);
                }
                imei.setMa(i.getMa());
                imei.setId(i.getId());
            }
        }
        if (dem == 0) {
            JOptionPane.showMessageDialog(this, "Sai mã IMEI hoặc mã imei không tồn tại");
            return;
        }

        HoaDonChiTietModel hdct = new HoaDonChiTietModel();
        CTSanPham cTSanPham=new CTSanPham();
        hdct.setSl(1);
        hdct.setIdctsp(c);
        hdct.setIdhd(hd);
        hdct.setDongia(ctsp.getGiaBan());
        hdct.setThanhTien(Float.valueOf(1*ctsp.getGiaBan()));
        if (hdct == null) {
            return;
        }

        iHoaDonChiTietService.insertHDCT(hdct);
        iIMEIService.updateIMEI(imei);
        banHangjp.loadGioHang1(hd.getId());
                }

            }
               
        } while (true);
    }
//bye
    private List tachChuoi(String s) {
        List<String> list = new ArrayList<>();
        String[] mang = s.split(" ");
        if (mang == null) {
            return null;
        }
        for (String x : mang) {
            list.add(x);
        }
        return list;
    }
    @Override
    public Thread newThread(Runnable r) {
         Thread t = new Thread(r, "My Thread");
        t.setDaemon(true);
        return t;
    }
}
